#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import os
import sys
import tensorflow as tf
from nlpvocab import Vocabulary
from tfdsbd.train import train_eval_export


def main(argv):
    del argv

    # Load vocabulary
    ngram_vocab = Vocabulary.load(FLAGS.ngram_vocab, format=Vocabulary.FORMAT_BINARY_PICKLE)

    # Load hyperparams
    raw_params = FLAGS.hyper_params.read()

    metrics = train_eval_export(ngram_vocab, raw_params, FLAGS.data_path, FLAGS.model_path, FLAGS.export_path, True)
    print(metrics)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Train, evaluate and export tfdsbd model')
    parser.add_argument(
        'data_path',
        type=str,
        help='Directory with TFRecord files')
    parser.add_argument(
        'ngram_vocab',
        type=str,
        help='Pickle-encoded ngram vocabulary file')
    parser.add_argument(
        'hyper_params',
        type=argparse.FileType('rb'),
        help='JSON-encoded model hyperparameters file')
    parser.add_argument(
        'model_path',
        type=str,
        help='Path to store model checkpoints')
    parser.add_argument(
        '-export_path',
        type=str,
        default='',
        help='Path to store exported model')

    FLAGS, unparsed = parser.parse_known_args()
    assert os.path.exists(FLAGS.data_path) and os.path.isdir(FLAGS.data_path)
    assert os.path.exists(FLAGS.ngram_vocab) and os.path.isfile(FLAGS.ngram_vocab)
    assert not os.path.exists(FLAGS.model_path) or os.path.isdir(FLAGS.model_path)
    assert not os.path.exists(FLAGS.export_path) or os.path.isdir(FLAGS.export_path)

    tf.logging.set_verbosity(tf.logging.INFO)
    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
